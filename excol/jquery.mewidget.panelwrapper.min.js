/**
 * PanelWrapper Object
 *
 * Basic Object for objects consisting of groups of panels (e.g. accordion, tablist)
 * 
 * @package meWidgets
 * @author Mandana Eibegger
 *          with support from eGovMon Project and 
 *          W3C/WAI Education and Outreach Working Group (EOWG)
 *          see http://www.schoener.at/mewidgets/ for more information
 * @version v0.9 (17 Feb 2012)
 * 
 * Implements basic functionality for groups of panels
 *
 * saves the following data
 *   - wrapper.data('panels') - array(Map representation of panel Panel Object)
 *   - head.data('panel').panelnum - consecutive number of the panel
 *   
 * @uses $.fn.panel
 */
(function($,$this){$this=$.fn.panelwrapper=function(method){if($.isFunction($this[method])){var args=Array.prototype.slice.call(arguments,1);return this.each(function(){$this[method].apply($(this),args)})}else{$.error("Method "+method+" does not exist on jQuery.panelWrapper");return this}};$.extend($this,{panel:$.fn.panel,settings:{head:"f_panelHead",expander:"f_expanderWrapper",buttonExpand:"f_expand",buttonCollapse:"f_collapse",body:"f_panelBody",panelControls:"",loadSpecPrefix:"f_fileToLoad_",triggerShown:"f_triggerShown",controlsPrefix:"f_controls_",controlExpand:"f_controlsExpand",controlCollapse:"f_controlsCollapse",loadControl:"f_loadControl",prependControl:"f_prependControl",widgetLoadedCSS:"",widgetLoadedCSSMedia:"",nestedWidget:"f_nestedWidget"},init:function(wrapper,options,extensionPlugin){if(extensionPlugin){$.extend($this.settings,extensionPlugin.settings);$this=extensionPlugin}if(options){$.extend($this.settings,options)}wrapper.data("panelWrapperWidget",$this).data("panels",$()).data("expandedPanels",$()).data("collapsedPanels",$()).data("disabledPanels",$()).bind("actionStarted",{status:"started"},$this.handlePanels).bind("actionEnded",{status:"ended"},$this.handlePanels).bind("elementshidden",$this.disablePanels).bind("elementsshown",$this.enablePanels);$this.handleKeyboardNaviSwitch(wrapper)},addPanel:function(head,body,wrapper){$this.panel.apply(head,["init",body,wrapper,$this.settings]);var panels=wrapper.data("panels");head.data("panel").panelnum=panels.length;panels=panels.add(head.data("panel"));wrapper.data("panels",panels);if(head.data("panel").tab.data("tabSettings").expanded){var expandedPanels=wrapper.data("expandedPanels");expandedPanels=expandedPanels.add(head.data("panel"));wrapper.data("expandedPanels",expandedPanels)}else{var collapsedPanels=wrapper.data("collapsedPanels");collapsedPanels=collapsedPanels.add(head.data("panel"));wrapper.data("collapsedPanels",collapsedPanels)}},prepareHeaders:function(headers,fileSpec,loadMethod){if(typeof(headers)=="string"){loadMethod=fileSpec;fileSpec=headers;headers=this}headers.bind("expandedByHashChange",$this.expandedByHashChange);var defaultFile;try{defaultFile=eval(fileSpec)}catch(error){}if(typeof(defaultFile)=="undefined"){defaultFile=fileSpec?fileSpec:""}if(defaultFile){var loadTo=headers;if(loadMethod=="load"){loadTo=headers.find("."+$this.settings.expander).not(":has("+$this.settings.buttonExpand+")").not(":has("+$this.settings.buttonCollapse+")")}loadTo.metools("loadFile",defaultFile,$this.expansionButtonLoaded,$this.initialisationFinished,{translate:false,loadMethod:loadMethod})}else{headers.each(function(){var tabSettings=$(this).data("panel").tab.data("tabSettings");$this.panel.initPanel(tabSettings)});$this.initialisationFinished(headers)}},expansionButtonLoaded:function(element){$this.panel.expansionButtonLoaded.apply($(element))},initialisationFinished:function(headers){var wrapper=headers.eq(0).data("panel").tab.data("tabSettings").wrapper;var settings=wrapper.data("panelSettings");if(settings.widgetLoadedCSS){$.fn.metools.loadCSS(settings.widgetLoadedCSS,settings.widgetLoadedCSSMedia)}},handlePanels:function(event){var action=arguments[1];var paramsToPass=Array.prototype.slice.call(arguments,2);var expandedPanels,head,wrapper,widget;head=paramsToPass[0];wrapper=head.data("panel").tab.data("tabSettings").wrapper;widget=wrapper.data("panelWrapperWidget");if(action=="expand"){if(event.data.status=="started"){expandedPanels=wrapper.data("expandedPanels");expandedPanels=expandedPanels.add(head.data("panel"));wrapper.data("expandedPanels",expandedPanels);var collapsedPanels=widget.removePanel(wrapper.data("collapsedPanels"),head.data("panel"));wrapper.data("collapsedPanels",collapsedPanels);widget.expandStarted(paramsToPass)}else{if(event.data.status=="ended"){widget.expandedFully(paramsToPass)}}}else{if(action=="collapse"){if(event.data.status=="started"){collapsedPanels=wrapper.data("collapsedPanels");collapsedPanels=collapsedPanels.add(head.data("panel"));wrapper.data("collapsedPanels",collapsedPanels);expandedPanels=wrapper.data("expandedPanels");expandedPanels=widget.removePanel(wrapper.data("expandedPanels"),head.data("panel"));wrapper.data("expandedPanels",expandedPanels);widget.collapseStarted(paramsToPass)}else{if(event.data.status=="ended"){widget.collapsedFully(paramsToPass)}}}}event.stopPropagation()},removePanel:function(jObjectPanelMapList,panelMap){jObjectPanelMapList.each(function(){var same=true;for(var key in panelMap){if(this[key][0]!=panelMap[key][0]){same=false;break}}if(same){jObjectPanelMapList=jObjectPanelMapList.not($(this))}});return jObjectPanelMapList},collapsePanels:function(jObjectPanelMapList,headNoCollapse){jObjectPanelMapList.each(function(){if(headNoCollapse==undefined||headNoCollapse[0]!=this.head[0]){this.tab.trigger("collapse")}})},expandPanels:function(jObjectPanelMapList){jObjectPanelMapList.each(function(){this.tab.trigger("expand")})},disablePanels:function(event,disabledElements){var wrapper=$(this);var widget=wrapper.data("panelWrapperWidget");var enabledPanels=wrapper.data("panels");var disabledPanels=wrapper.data("disabledPanels");var selectedToDisable=$();var enabledNum=0;enabledPanels.each(function(){var tab=this.tab;if(widget.panelDisabledByElements(tab,wrapper,disabledElements)){enabledPanels=enabledPanels.not($(this));disabledPanels=disabledPanels.add($(this));widget.panel.disableTab(tab);if(tab.data("tabSettings").selected){selectedToDisable=tab}}else{if(!this.panelnumOrig&&this.panelnumOrig!==0){this.panelnumOrig=this.panelnum}this.panelnum=enabledNum;enabledNum++}});wrapper.data("panels",enabledPanels).data("disabledPanels",disabledPanels);if(selectedToDisable.length){widget.disableSelected(selectedToDisable,wrapper)}},enablePanels:function(event,enabledElements){var wrapper=$(this);var widget=wrapper.data("panelWrapperWidget");var enabledPanels=wrapper.data("panels");var disabledPanels=wrapper.data("disabledPanels");if(disabledPanels.length){var wereAllDisabled=(enabledPanels.length==0);disabledPanels.each(function(){var tab=this.tab;if(widget.panelEnabledByElements(tab,wrapper,enabledElements)){enabledPanels=enabledPanels.add($(this));disabledPanels=disabledPanels.not($(this));widget.panel.enableTab(tab)}});enabledPanels=widget.orderPanels(enabledPanels);wrapper.data("panels",enabledPanels).data("disabledPanels",disabledPanels);if(wereAllDisabled){widget.resetEnabledPanels(wrapper)}else{var selected=widget.getSelectedTab(wrapper);if(selected.data("tabSettings").selectedByDefault){widget.resetDefaultEnabled(wrapper,selected)}}}},orderPanels:function(jObjectPanelMapList){var ordered=new Array();jObjectPanelMapList.each(function(){if(!this.panelnumOrig&&this.panelnumOrig!==0){this.panelnumOrig=this.panelnum}ordered[this.panelnumOrig]=this});var ret=$();var enabledNum=0;while(ordered.length){var panel=ordered.shift();if(panel){panel.panelnum=enabledNum;enabledNum++;ret=ret.add(panel)}}return ret},getSelectedTab:function(wrapper){var selected=$();wrapper.data("panels").each(function(){if(this.tab.data("tabSettings").selected){selected=this.tab}});return selected},panelDisabledByElements:function(tab,wrapper,disabledElements){var isDisabled=false;if(disabledElements.index(tab)!=-1){isDisabled=true}else{disabledElements.has(tab).each(function(){if(wrapper.has(this)){isDisabled=true}})}return isDisabled},panelEnabledByElements:function(tab,wrapper,enabledElements){var isEnabled=false;if(enabledElements.index(tab)!=-1){isEnabled=true}else{enabledElements.has(tab).each(function(){if(wrapper.has(this)){isEnabled=true}})}return isEnabled},disableSelected:function(selectedTabToDisable,wrapper){var widget=wrapper.data("panelWrapperWidget");widget.panel.deactivateTab(selectedTabToDisable);widget.resetEnabledPanels(wrapper,selectedTabToDisable)},resetEnabledPanels:function(wrapper,selectedTabToDisable){var widget=wrapper.data("panelWrapperWidget");var enabledPanels=wrapper.data("panels");if(enabledPanels.length){var nextSelected=widget.getNextSelected(wrapper,selectedTabToDisable);widget.panel.activateTab(nextSelected.tab,nextSelected.selectAsDefault)}},getNextSelected:function(wrapper,selected){return{tab:wrapper.data("panels")[0].tab,selectAsDefault:true}},resetDefaultEnabled:function(wrapper,selected){var widget=wrapper.data("panelWrapperWidget");widget.panel.deactivateTab(selected);widget.resetEnabledPanels(wrapper,selected)},isDisabled:function(wrapper,tab){var isDisabled=false;wrapper.data("disabledPanels").each(function(){if(this.tab[0]==tab[0]){isDisabled=true;return false}});return isDisabled},expandStarted:function(params){var head=params[0]},expandedFully:function(params){var head=params[0]},collapseStarted:function(params){var head=params[0]},collapsedFully:function(params){var head=params[0]},expandedByHashChange:function(event){},handleKeyboardNaviSwitch:function(wrapper){$("input:radio[name=f_keyboardNavi]").live("change",{wrapper:wrapper},$this.switchKeyboardNavi)},switchKeyboardNavi:function(event){var wrapper=event.data.wrapper}})})(jQuery);